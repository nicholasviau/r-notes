[
["index.html", "Nick’s R Notes About", " Nick’s R Notes Nicholas Edward Viau 2020-07-20 About My name is Nick and this is a collection of R notes I have compiled over the years. Though much of what is found in here can be found elsewhere, the format here suits my needs, and is somewhere between a longform blog post, a cookbook, and a technical manual. Frankly I don’t know if this will ever mature into anything, but I hope you find it useful if you happen to stumble upon it. "],
["dplyr.html", "Chapter 1 dplyr", " Chapter 1 dplyr "],
["if-else.html", "Chapter 2 if_else()", " Chapter 2 if_else() "],
["case-when.html", "Chapter 3 case_when() 3.1 Using case_when() With Text Data 3.2 Wrapping case_when() Inside Functions 3.3 Using case_when() With NA Values", " Chapter 3 case_when() The case_when() function is a generalization of if_else(). Use case_when() if you find yourself needing multiple if_else() statements. library(tidyverse) ## ── Attaching packages ──────────────────────────────── tidyverse 1.3.0 ── ## ✔ ggplot2 3.3.1 ✔ purrr 0.3.4 ## ✔ tibble 3.0.1 ✔ dplyr 1.0.0 ## ✔ tidyr 1.1.0 ✔ stringr 1.4.0 ## ✔ readr 1.3.1 ✔ forcats 0.5.0 ## ── Conflicts ─────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(gapminder) This example is from the official documention: starwars %&gt;% select(name:mass, gender, species) %&gt;% mutate( type = case_when( height &gt; 200 | mass &gt; 200 ~ &quot;large&quot;, species == &quot;Droid&quot; ~ &quot;robot&quot;, TRUE ~ &quot;other&quot; ) ) ## # A tibble: 87 x 6 ## name height mass gender species type ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywalker 172 77 masculine Human other ## 2 C-3PO 167 75 masculine Droid robot ## 3 R2-D2 96 32 masculine Droid robot ## 4 Darth Vader 202 136 masculine Human large ## 5 Leia Organa 150 49 feminine Human other ## 6 Owen Lars 178 120 masculine Human other ## 7 Beru Whitesun lars 165 75 feminine Human other ## 8 R5-D4 97 32 masculine Droid robot ## 9 Biggs Darklighter 183 84 masculine Human other ## 10 Obi-Wan Kenobi 182 77 masculine Human other ## # … with 77 more rows 3.1 Using case_when() With Text Data You can use case_when() to create new variables based on the presence of certain strings. You can combine it with str_detect() or base R’s grepl(). 3.2 Wrapping case_when() Inside Functions Keep in mind that case_when() is not a tidy eval function. “If you’d like to reuse the same patterns, extract the case_when() call in a normal function:” 3.3 Using case_when() With NA Values 3.3.1 NA as a Condition df &lt;- tibble(x = c(1, NA, 3), y = c(&quot;dog&quot;, NA, NA)) df ## # A tibble: 3 x 2 ## x y ## &lt;dbl&gt; &lt;chr&gt; ## 1 1 dog ## 2 NA &lt;NA&gt; ## 3 3 &lt;NA&gt; df %&gt;% mutate( status = case_when( is.na(x) ~ &quot;Unknown&quot;, TRUE ~ &quot;Complete&quot; )) ## # A tibble: 3 x 3 ## x y status ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 dog Complete ## 2 NA &lt;NA&gt; Unknown ## 3 3 &lt;NA&gt; Complete 3.3.2 Converting to NA You must be very precise with type delcaration when dealing with NA values with case_when(). NA is of type logical, but if you are using case_when() to recode you must use the right sorts or you will get an error. The types include: NA_real_ NA_character_ NA_integer_ NA_complex_ Here an error will be thrown: iris %&gt;% mutate( Sepal.Width = case_when( Sepal.Length == 5.1 ~ NA, TRUE ~ 2)) %&gt;% head But when we are type-specific: iris %&gt;% mutate( Sepal.Width = case_when( Sepal.Length == 5.1 ~ NA_real_, TRUE ~ 2)) %&gt;% head ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 NA 1.4 0.2 setosa ## 2 4.9 2 1.4 0.2 setosa ## 3 4.7 2 1.3 0.2 setosa ## 4 4.6 2 1.5 0.2 setosa ## 5 5.0 2 1.4 0.2 setosa ## 6 5.4 2 1.7 0.4 setosa "],
["na-values.html", "Chapter 4 NA Values 4.1 Replacing NA Values 4.2 Assigning NA Values 4.3 Using filter() with NA Values 4.4 Dropping NA Values", " Chapter 4 NA Values library(tidyverse) # df &lt;- tibble(x = c(1, NA, 3)) df &lt;- tibble(x = c(1, NA, 3), y = c(4, NA, NA), z = c(6, 7, 8)) 4.1 Replacing NA Values Replacing NA values in a dataframe is simple. You can place the replace_na() function inside of mutate: df %&gt;% mutate(x = replace_na(x, 0)) ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 4 6 ## 2 0 NA 7 ## 3 3 NA 8 And using scoped verbs: df %&gt;% mutate_all(~replace_na(., &quot;Unknown&quot;)) ## # A tibble: 3 x 3 ## x y z ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 4 6 ## 2 Unknown Unknown 7 ## 3 3 Unknown 8 Or you can specify variables wrapped inside list(): df %&gt;% replace_na(list(x = 0, y = &quot;unknown&quot;)) ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 4 6 ## 2 0 unknown 7 ## 3 3 unknown 8 4.2 Assigning NA Values Sometimes you most to convert values to NA manually. Here we have NA values stored as a word vector “NA”. (Be sure to see options for automatically converting NA values when you import data here.) For these tasks, dplyr::na_f() is is particularly useful wrapped inside of mutate(), as it is meant to work on vectors rather than entire data frames. df &lt;- tibble(x = c(1, NA, 3), y = c(&quot;dog&quot;, &quot;NA&quot;, &quot;NA&quot;), z = c(6, &quot;NA&quot;, 8)) df ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 dog 6 ## 2 NA NA NA ## 3 3 NA 8 df %&gt;% mutate(y = na_if(y, &quot;NA&quot;)) ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 dog 6 ## 2 NA &lt;NA&gt; NA ## 3 3 &lt;NA&gt; 8 As before, you can easily scope it: df %&gt;% mutate_all(~na_if(., &quot;NA&quot;)) ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 dog 6 ## 2 NA &lt;NA&gt; &lt;NA&gt; ## 3 3 &lt;NA&gt; 8 What if you have multiple different values? For example, imagine you have columns which contain a dash for certain NA values and a literal character string &quot;NA&quot; for others. df &lt;- tibble(x = c(1, NA, 3), y = c(&quot;dog&quot;, &quot;NA&quot;, &quot;NA&quot;), z = c(6, &quot;-&quot;, 8)) df ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 dog 6 ## 2 NA NA - ## 3 3 NA 8 This is a bit tricky (you can read why here). At the moment there are several options: Manually convert each column. Create a custom function. Replace a selection of known NA value representations and then use na_if(). The naniar package. More on this later. 4.2.0.1 The naniar Package library(naniar) df %&gt;% replace_with_na(replace = list(y = &quot;NA&quot;)) ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 dog 6 ## 2 NA &lt;NA&gt; - ## 3 3 &lt;NA&gt; 8 df %&gt;% naniar::replace_with_na_all(condition = ~.x %in% c(&quot;NA&quot;, &quot;-&quot;)) ## # A tibble: 3 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 dog 6 ## 2 NA &lt;NA&gt; &lt;NA&gt; ## 3 3 &lt;NA&gt; 8 4.3 Using filter() with NA Values filter() will only include rows where the condition evaluates to TRUE and thus excludes NA values present in your data. This is problematic because often NA values are important. If you wish to return NA values, ask for them explicitly. # This will exclude NA values filter(df, x &gt; 1) ## # A tibble: 1 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 3 NA 8 # Now include NA filter(df, is.na(x) | x &gt; 1) ## # A tibble: 2 x 3 ## x y z ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 NA NA - ## 2 3 NA 8 4.4 Dropping NA Values Drop rows with NA vlaues with tidyr::drop_na(). drop_na() supports scoping. Example from the official documentation: library(dplyr) df &lt;- tibble(x = c(1, 2, NA), y = c(&quot;a&quot;, NA, &quot;b&quot;)) df %&gt;% drop_na() ## # A tibble: 1 x 2 ## x y ## &lt;dbl&gt; &lt;chr&gt; ## 1 1 a df %&gt;% drop_na(x) ## # A tibble: 2 x 2 ## x y ## &lt;dbl&gt; &lt;chr&gt; ## 1 1 a ## 2 2 &lt;NA&gt; You can also use base R’s na.omit() wrapped inside of filter(): df %&gt;% filter(!is.na(x)) ## # A tibble: 2 x 2 ## x y ## &lt;dbl&gt; &lt;chr&gt; ## 1 1 a ## 2 2 &lt;NA&gt; "]
]
